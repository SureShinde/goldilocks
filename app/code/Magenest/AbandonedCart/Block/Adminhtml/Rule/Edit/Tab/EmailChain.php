<?php

namespace Magenest\AbandonedCart\Block\Adminhtml\Rule\Edit\Tab;

use Magenest\AbandonedCart\Model\Config\Source\EmailTemplate;
use Magento\Config\Model\Config\Source\Email\Identity;

class EmailChain extends \Magento\Backend\Block\Widget\Form\Generic implements \Magento\Backend\Block\Widget\Tab\TabInterface
{
    /** @var \Magento\Backend\Block\Widget\Form\Renderer\Fieldset $_rendererFieldset */
    protected $_rendererFieldset;

    protected $type;

    protected $_emailIdentity;

    protected $_emailTemplate;

    protected $__nameInLayout = "abandonedcart_rule_new_tab_emails";

    /**
     * EmailChain constructor.
     *
     * @param Identity $identity
     * @param EmailTemplate $emailTemplate
     * @param \Magento\Backend\Block\Template\Context $context
     * @param \Magento\Backend\Block\Widget\Form\Renderer\Fieldset $rendererFieldset
     * @param \Magento\Framework\Registry $registry
     * @param \Magento\Framework\Data\FormFactory $formFactory
     * @param array $data
     */
    public function __construct(
        Identity $identity,
        EmailTemplate $emailTemplate,
        \Magento\Backend\Block\Template\Context $context,
        \Magento\Backend\Block\Widget\Form\Renderer\Fieldset $rendererFieldset,
        \Magento\Framework\Registry $registry,
        \Magento\Framework\Data\FormFactory $formFactory,
        array $data = []
    ) {
        $this->_rendererFieldset = $rendererFieldset;
        $this->_rendererFieldset->setData('papaClass', $this);
        $this->_emailIdentity = $identity;
        $this->_emailTemplate = $emailTemplate;
        parent::__construct($context, $registry, $formFactory, $data);
    }

    public function _prepareForm()
    {
        $ruleModel   = $this->_coreRegistry->registry('abandonedcart_rule');
        if($ruleModel->getData('attached_files')) {
            $attachFiles = json_decode($ruleModel->getData('attached_files'), true);
        } else {
            $attachFiles = [];
        }
        /** @var \Magento\Framework\Data\Form $form */
        $form = $this->_formFactory->create();
        $form->setHtmlIdPrefix('rule_');

        $uploadAttachUrl = $this->getUrl('abandonedcart/rule/upload');

        $renderer = $this->_rendererFieldset->setTemplate(
            'Magenest_AbandonedCart::rule/emailChain.phtml'
        )->setNewChildUrl(
            $this->getUrl('sales_rule/promo_quote/newConditionHtml/form/rule_conditions_fieldset')
        );
        $renderer->setData('uploadUrl', $uploadAttachUrl);

        $form->addFieldset(
            'email_chains',
            [
                'legend' => ''
            ]
        )->setRenderer(
            $renderer
        );
        $form->addField(
            'required-email-chain',
            'hidden',
            [
                'name'  => 'required-email-chain',
                'class' => 'email-chain-required-entry',
            ]
        );

        $renderer->setData('type', $this->type);

        $renderer->setData('attached_files', $attachFiles);

        $renderer->setData('options', $this->getEmailTemplates());
        if ($this->getRequest()->getParam('id')) {
            $editData = $ruleModel->getData();
            if ($editData['stores_view']) {
                $editData['stores_view'] = json_decode($editData['stores_view'], true);
            }

            if ($editData['customer_group']) {
                $editData['customer_group'] = json_decode($editData['customer_group'], true);
            }
            $renderer->setData('email_chain',$editData['email_chain'] ? json_decode($editData['email_chain'], true) : []);
            $editData['id'] = $this->getRequest()->getParam('id');
            $form->setValues($editData);
        }
        $this->setForm($form);
        return parent::_prepareForm(); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    public function getEmailTemplates()
    {
        $options = $this->_emailTemplate->toOptionArray();

        return $options;
    }

    public function getAvailableCouponRules()
    {
        $saleRuleCollection = \Magento\Framework\App\ObjectManager::getInstance()->create('Magento\SalesRule\Model\ResourceModel\Rule\Collection');
        $saleRuleCollection
            ->addFieldToFilter('coupon_type', \Magento\SalesRule\Model\Rule::COUPON_TYPE_SPECIFIC)
            ->addFieldToFilter('use_auto_generation', 1);
        $data = [];
        foreach ($saleRuleCollection->getItems() as $item) {
            $data[] = [
                'value' => $item->getRuleId(),
                'label' => $item->getName()
            ];
        }
        return $data;
    }

    public function getTabLabel()
    {
        return __('Email Chain');
    }

    public function getTabTitle()
    {
        return __('Email Chain');
    }

    public function canShowTab()
    {
        return true;
    }

    public function isHidden()
    {
        return false;
    }

    public function getEmailChain()
    {
        $ruleModel                                                             = $this->_coreRegistry->registry('abandonedcart_rule');
        $emailChain                                                            = $ruleModel->getData('email_chain') ? json_decode($ruleModel->getData('email_chain'), true): [];
        $this->jsLayout['components']['abandonedcart_emailchain']['component'] = "Magenest_AbandonedCart/js/rule/emailchain";
        $this->jsLayout['components']['abandonedcart_emailchain']['template']  = "Magenest_AbandonedCart/rule/emailChain";
        if (is_array($emailChain)) {
            $this->jsLayout['components']['abandonedcart_emailchain']['config']['email_chain'] = $emailChain;
        } else {
            $this->jsLayout['components']['abandonedcart_emailchain']['config']['email_chain'] = null;
        }
        $this->jsLayout['components']['abandonedcart_emailchain']['config']['emails']         = $this->getEmailTemplates();
        $this->jsLayout['components']['abandonedcart_emailchain']['config']['promotion_rule'] = $this->getAvailableCouponRules();
        return json_encode($this->jsLayout);
    }
}
