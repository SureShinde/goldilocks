<?php

namespace Magenest\AbandonedCart\Block\Adminhtml\Rule\Edit\Tab;

use Magenest\AbandonedCart\Helper\Data;
use Magento\Backend\Block\Template\Context;
use Magento\Backend\Block\Widget\Form\Renderer\Fieldset;
use Magento\Framework\Data\FormFactory;
use Magento\Framework\Registry;
use Magento\Framework\Serialize\Serializer\Json;

class Conditions extends \Magento\Backend\Block\Widget\Form\Generic implements \Magento\Backend\Block\Widget\Tab\TabInterface
{

    /** @var Fieldset $_rendererFieldset */
    protected $_rendererFieldset;

    /** @var \Magento\Rule\Block\Conditions $_conditions */
    protected $_conditions;

    /** @var Data $_helperData */
    protected $_helperData;

    /** @var Json */
    protected $_json;

    /**
     * Conditions constructor.
     *
     * @param Data $helperData
     * @param \Magento\Rule\Block\Conditions $conditions
     * @param Fieldset $rendererFieldset
     * @param Context $context
     * @param Registry $registry
     * @param FormFactory $formFactory
     * @param Json $json
     * @param array $data
     */
    public function __construct(
        Data $helperData,
        \Magento\Rule\Block\Conditions $conditions,
        Fieldset $rendererFieldset,
        Context $context,
        Registry $registry,
        FormFactory $formFactory,
        Json $json,
        array $data = []
    ) {
        $this->_helperData = $helperData;
        $this->_rendererFieldset = $rendererFieldset;
        $this->_conditions = $conditions;
        $this->_json = $json;
        parent::__construct($context, $registry, $formFactory, $data);
    }

    public function _prepareForm()
    {
        $ruleModel = $this->_coreRegistry->registry('abandonedcart_rule');
        $saleRuleModel = $this->_coreRegistry->registry('current_promo_sale_rule');
        $newChildUrl = $this->getUrl(
            'catalog_rule/promo_catalog/newConditionHtml/form/rule_conditions_fieldset'
        );
        /** @var \Magento\Framework\Data\Form $form */
        $form = $this->_formFactory->create();
        $form->setHtmlIdPrefix('rule_');

        //Add Conditions
        $renderer = $this->_rendererFieldset->setTemplate(
            'Magento_CatalogRule::promo/fieldset.phtml'
        )->setNewChildUrl(
            $newChildUrl
        );

        $fieldset = $form->addFieldset(
            'conditions_fieldset',
            ['legend' => __('Apply the rule only if the following conditions are met (leave blank for all products).')]
        )->setRenderer(
            $renderer
        );

        $fieldset->addField(
            'conditions',
            'text',
            [
                'name' => 'conditions',
                'label' => __('Conditions'),
                'title' => __('Conditions'),
                'required' => true
            ]
        )->setRule(
            $saleRuleModel
        )->setRenderer(
            $this->_conditions
        );

        if ($this->getRequest()->getParam('id')) {
            $editData = $ruleModel->getData();
            if ($editData['stores_view']) {
                $editData['stores_view'] = $this->_json->unserialize($editData['stores_view']);
            }

            if ($editData['customer_group']) {
                $editData['customer_group'] = $this->_json->unserialize($editData['customer_group']);
            }

            if ($editData['conditions_serialized']) {
                $editData['conditions_serialized'] = $this->_json->unserialize($editData['conditions_serialized']);
            }
            $editData['id'] = $this->getRequest()->getParam('id');
            $form->setValues($editData);
        }
        $this->setForm($form);

        return parent::_prepareForm(); // TODO: Change the autogenerated stub
    }

    public function getTabLabel()
    {
        return __('Conditions');
    }

    public function getTabTitle()
    {
        return __('Conditions');
    }

    public function canShowTab()
    {
        return true;
    }

    public function isHidden()
    {
        return false;
    }
}
